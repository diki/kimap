//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("kimap", "ServiceItemServiceItemMapping", "ServiceItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(kiMap.ServiceItem), "ServiceItemMapping", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(kiMap.ServiceItemMapping))]
[assembly: EdmRelationshipAttribute("kimap", "ServiceItemServiceItemMapping1", "ServiceItem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(kiMap.ServiceItem), "ServiceItemMapping", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(kiMap.ServiceItemMapping))]
[assembly: EdmRelationshipAttribute("kimap", "ServiceItemEntryTypeServiceItem", "ServiceItemEntryType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(kiMap.ServiceItemEntryType), "ServiceItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(kiMap.ServiceItem))]

#endregion

namespace kiMap
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class kimapContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new kimapContainer object using the connection string found in the 'kimapContainer' section of the application configuration file.
        /// </summary>
        public kimapContainer() : base("name=kimapContainer", "kimapContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new kimapContainer object.
        /// </summary>
        public kimapContainer(string connectionString) : base(connectionString, "kimapContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new kimapContainer object.
        /// </summary>
        public kimapContainer(EntityConnection connection) : base(connection, "kimapContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ServiceItem> ServiceItemSet
        {
            get
            {
                if ((_ServiceItemSet == null))
                {
                    _ServiceItemSet = base.CreateObjectSet<ServiceItem>("ServiceItemSet");
                }
                return _ServiceItemSet;
            }
        }
        private ObjectSet<ServiceItem> _ServiceItemSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ServiceItemMapping> ServiceItemMappingSet
        {
            get
            {
                if ((_ServiceItemMappingSet == null))
                {
                    _ServiceItemMappingSet = base.CreateObjectSet<ServiceItemMapping>("ServiceItemMappingSet");
                }
                return _ServiceItemMappingSet;
            }
        }
        private ObjectSet<ServiceItemMapping> _ServiceItemMappingSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ServiceItemEntryType> ServiceItemEntryTypeSet
        {
            get
            {
                if ((_ServiceItemEntryTypeSet == null))
                {
                    _ServiceItemEntryTypeSet = base.CreateObjectSet<ServiceItemEntryType>("ServiceItemEntryTypeSet");
                }
                return _ServiceItemEntryTypeSet;
            }
        }
        private ObjectSet<ServiceItemEntryType> _ServiceItemEntryTypeSet;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ServiceItemSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToServiceItemSet(ServiceItem serviceItem)
        {
            base.AddObject("ServiceItemSet", serviceItem);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ServiceItemMappingSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToServiceItemMappingSet(ServiceItemMapping serviceItemMapping)
        {
            base.AddObject("ServiceItemMappingSet", serviceItemMapping);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ServiceItemEntryTypeSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToServiceItemEntryTypeSet(ServiceItemEntryType serviceItemEntryType)
        {
            base.AddObject("ServiceItemEntryTypeSet", serviceItemEntryType);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="kimap", Name="ServiceItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceItem : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ServiceItem object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sentence">Initial value of the Sentence property.</param>
        /// <param name="entryTypeId">Initial value of the EntryTypeId property.</param>
        public static ServiceItem CreateServiceItem(global::System.Int32 id, global::System.String sentence, global::System.Int32 entryTypeId)
        {
            ServiceItem serviceItem = new ServiceItem();
            serviceItem.Id = id;
            serviceItem.Sentence = sentence;
            serviceItem.EntryTypeId = entryTypeId;
            return serviceItem;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Sentence
        {
            get
            {
                return _Sentence;
            }
            set
            {
                OnSentenceChanging(value);
                ReportPropertyChanging("Sentence");
                _Sentence = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Sentence");
                OnSentenceChanged();
            }
        }
        private global::System.String _Sentence;
        partial void OnSentenceChanging(global::System.String value);
        partial void OnSentenceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EntryTypeId
        {
            get
            {
                return _EntryTypeId;
            }
            set
            {
                OnEntryTypeIdChanging(value);
                ReportPropertyChanging("EntryTypeId");
                _EntryTypeId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EntryTypeId");
                OnEntryTypeIdChanged();
            }
        }
        private global::System.Int32 _EntryTypeId;
        partial void OnEntryTypeIdChanging(global::System.Int32 value);
        partial void OnEntryTypeIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("kimap", "ServiceItemServiceItemMapping", "ServiceItemMapping")]
        public EntityCollection<ServiceItemMapping> ServiceItemMapping
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ServiceItemMapping>("kimap.ServiceItemServiceItemMapping", "ServiceItemMapping");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ServiceItemMapping>("kimap.ServiceItemServiceItemMapping", "ServiceItemMapping", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("kimap", "ServiceItemServiceItemMapping1", "ServiceItemMapping")]
        public EntityCollection<ServiceItemMapping> ServiceItemMapping_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ServiceItemMapping>("kimap.ServiceItemServiceItemMapping1", "ServiceItemMapping");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ServiceItemMapping>("kimap.ServiceItemServiceItemMapping1", "ServiceItemMapping", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("kimap", "ServiceItemEntryTypeServiceItem", "ServiceItemEntryType")]
        public ServiceItemEntryType ServiceItemEntryType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItemEntryType>("kimap.ServiceItemEntryTypeServiceItem", "ServiceItemEntryType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItemEntryType>("kimap.ServiceItemEntryTypeServiceItem", "ServiceItemEntryType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceItemEntryType> ServiceItemEntryTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItemEntryType>("kimap.ServiceItemEntryTypeServiceItem", "ServiceItemEntryType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceItemEntryType>("kimap.ServiceItemEntryTypeServiceItem", "ServiceItemEntryType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="kimap", Name="ServiceItemEntryType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceItemEntryType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ServiceItemEntryType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="caption">Initial value of the Caption property.</param>
        public static ServiceItemEntryType CreateServiceItemEntryType(global::System.Int32 id, global::System.String caption)
        {
            ServiceItemEntryType serviceItemEntryType = new ServiceItemEntryType();
            serviceItemEntryType.Id = id;
            serviceItemEntryType.Caption = caption;
            return serviceItemEntryType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Caption
        {
            get
            {
                return _Caption;
            }
            set
            {
                OnCaptionChanging(value);
                ReportPropertyChanging("Caption");
                _Caption = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Caption");
                OnCaptionChanged();
            }
        }
        private global::System.String _Caption;
        partial void OnCaptionChanging(global::System.String value);
        partial void OnCaptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("kimap", "ServiceItemEntryTypeServiceItem", "ServiceItem")]
        public EntityCollection<ServiceItem> ServiceItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ServiceItem>("kimap.ServiceItemEntryTypeServiceItem", "ServiceItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ServiceItem>("kimap.ServiceItemEntryTypeServiceItem", "ServiceItem", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="kimap", Name="ServiceItemMapping")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ServiceItemMapping : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ServiceItemMapping object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="parentId">Initial value of the ParentId property.</param>
        /// <param name="childId">Initial value of the ChildId property.</param>
        public static ServiceItemMapping CreateServiceItemMapping(global::System.Int32 id, global::System.Int32 parentId, global::System.Int32 childId)
        {
            ServiceItemMapping serviceItemMapping = new ServiceItemMapping();
            serviceItemMapping.Id = id;
            serviceItemMapping.ParentId = parentId;
            serviceItemMapping.ChildId = childId;
            return serviceItemMapping;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
                OnParentIdChanging(value);
                ReportPropertyChanging("ParentId");
                _ParentId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentId");
                OnParentIdChanged();
            }
        }
        private global::System.Int32 _ParentId;
        partial void OnParentIdChanging(global::System.Int32 value);
        partial void OnParentIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ChildId
        {
            get
            {
                return _ChildId;
            }
            set
            {
                OnChildIdChanging(value);
                ReportPropertyChanging("ChildId");
                _ChildId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ChildId");
                OnChildIdChanged();
            }
        }
        private global::System.Int32 _ChildId;
        partial void OnChildIdChanging(global::System.Int32 value);
        partial void OnChildIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("kimap", "ServiceItemServiceItemMapping", "ServiceItem")]
        public ServiceItem ServiceItem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping", "ServiceItem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping", "ServiceItem").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceItem> ServiceItemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping", "ServiceItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping", "ServiceItem", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("kimap", "ServiceItemServiceItemMapping1", "ServiceItem")]
        public ServiceItem ServiceItem_1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping1", "ServiceItem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping1", "ServiceItem").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ServiceItem> ServiceItem_1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping1", "ServiceItem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ServiceItem>("kimap.ServiceItemServiceItemMapping1", "ServiceItem", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
